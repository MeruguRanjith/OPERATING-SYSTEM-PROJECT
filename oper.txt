                       OPERATING SYSTEM ASSIGNMENT




STUDENT NAME: MERUGU RANJITH.
STUDENT ID:         11811946
SECTION:                K18ZV
EMAIL ADDRESS:  meruguranjith13@gmail.com
GITHUB LINK:

PROBLEM:
Question no:5
        
   A university CSE dept have Teaching assistant (TA) for clarifyng doubts of students. In TA room there is only avaliability of one chair for student to sit and wait.Out side of TA room in hallway there are three chairs for students to sit and wait.TA will take rest whenever there is no student with doubt. if all seats are filled with students then new students will have to come again.
CONCEPTS USED:
            Mutex lock for synchronizing the students entry and exit into TA room.
Threads used for processing simulatneous data or entry exit of student according to avaliability of TA time.
Semaphores is used for multitasking ,to abstract data type to control a common resource in a concurrent system.



CODE:
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#include<pthread.h>
#include<string.h>
#include<semaphore.h>
void *student_activity(void* student_sno);
void* TA_activity();
semaphore_m semaphore_student;
semaphore_m semaphore_TA;
pthread_mutex_m mutex_thread;
int waiting_hall_chairs[3];
int num_of_hall_chairs=0;
int total_waiting_chairs=0;
int total_students_waiting=0;
int next_seating=0;
int next_teaching=0;
int TA_sleep_check=0;
int main(int m,char**n)
{
   int student_count;
int total_existing_std;
int i;
if(isNumber(n[1]==1)
{
   student_count=atoi(n[1]);
}
else
{
   printf("Invalid inp ,check again, retry");
return 0;
}
}
else
{
   student_count=total_existing_std;
}
int student_sno[student_count];
pthread_m students[student_count];
pthread_m TA;
semaphoe_init(&semaphore_student,0,0);
semaphore_init(&semaphore_TA,0,1);
pthread_mutex_init(&mutex_thread,NULL);
pthread_creation(&TA,NULL,TA_activity,NULL);
for(int i=0; i<student_count;i++)
{
  student_sno[i]=i+1;
pthread_creation(&students[i],NULL,student_activity,(void*)&student_sno[i]);
}
pthread_Add(TA,NULL);
{
   for(int i=0; i<student_sno;i++)
{
   pthread_Add(students[i],NULL);
}
return 0;
}
void* TA_Activity()
{
   printf("checking students ");
  while(1)
{
     if(no_of_std_wait>0)
{
    TA_sleep_check=0;
semaphore_wait(&semaphore_students);
pthreads_mutex_lock(&mutex_thread);
int official_helping_time=rand()%5;
printf("Helping hours are %d and student working hrs is % d", official_helping_time,(total_students_waiting -1);
printf("student %d reciving help ",waiting_hall_chair[next_teaching_pos]);
waiting_hall_chair[next_teaching_pos]=0;
total_students_waiting--;
next_teaching_pos=(next_teaching_pos+1)%Num_waiting_chairs;
sleep(official_help_time);
pthread_mutex_unlock(&mutex_thread);
semaphore_pos(&semaphore_TA);
}
  else
    {
       if(TA_sleep_check=0)
     {
       printf("no student waiting");
      TA_sleep_check=1;
      }
       }
   }
}
void* student_Activity(void* student_sno);
{
    int sno_student=*(int*)student_sno;
while(1)
   {
     if(iswaiting(sno_student)==1)
    {
      continue;
}
int time =rand()%5;
printf('student % d is programming for %d sec", sno_student.time);
sleep(time)
pthread_mutex_lock(&mutex_thread);
if(total_student_waiting<number_of_hall_chairs)
{
   waiting_hall_chair[next_seating_pos]=sno_student;
   total_student_wait ++
printf("students %d takes a seat student waiting %d", sno_student,total_students_waiting);
next_seat_pos=(next_seat_pos+1)%total_waiting_chairs;
pthread_mutex_unlock(& mutex_thread);
semaphore_pos(&semaphore_std);
semaphore_wait(&semaphore_TA);
}
else
{
   pthread_mutex_unlock(&mutex_thread);
   printf("no chair is available, sorry come again");
}
}
}
int isNumber(char number[])
{
   int i;
  for(i=0;number[i]=0;i++)
{
   if(is digit(number[i]))
{
   return 0;
  }
}
int iswaitng(int student_sno)
{
  for(int i=0; i<3; i++)
{
   if(waiting_hall_chair[i]==student_sno;
   {
     return 1;
    }
      return 0;
}


ALGORITHM:
      

1.Declare constraints such as total_number of students, students_waiting, No of chairs present, Hallway_chairs, Waiting list of students etc….

2.Create a thread for joining the student activity and teaching activity by importing pthread header file.With pthread_.

3.Create a mutex lock with pthread to check wether Assistant sleeping or not.

4.If there is a mutex lock create a mutex unlock variable with pthread so that further monitoring will be possible.

5.Create a student_activity function to monitor the student activities.

6.Create a function that describes Teaching assistant activities with name Assistant_activity.

7.Create a semaphore variables so that we can access the activities of both student and teaching assistant activities.

8.Use necessary for …loops to check the activities.

9.Use while loop to check the Boolean function ture or not if true return the activity.

10.Finally print the necessary information that we need like activities of student, checking assistant sleeping or not, teaching assistant activity etc..



PURPOSE OF USE:
       
        This project helps us to understand the application of semaphore,
Mutex lock & unlock, also gives us brief idea of using thread and creation of thread functions etc…

TEST CASES:
   
1.Checking assistant sleeping or not….This uses flag it returns false if he awake or it returns true if he sleeps..

If he sleeps the function terminates and wait until he awakes.
Or if he awakes function checks the assistant activity function and returns the value.

2.Student activity ..

If there is no availability of chairs then student waits …
If there is availability he occupies the chair and wait until he gets chance to meet assistant.

3.Teaching assistant activity….


      If he sleeps his all other activity gets terminates..
      If he awake then he teaches student with queue allotted to him..




PROBLEM:

Q: 22
     
      Program to implement FIFO  page replacement algorithm .First generate a random –page-reference string where page ranges from 0 to 9…
We need to apply random page-reference string to each algorithm , and the we need to record the number of page fault incurred by each algorithm .

In this problem in order to generate 0-9 pages we should use page –replacement-algorithm .. And we should use page demand so that we can generate 1 -7 number of frame pages …


C0DE:

     #include<stdio.h>
     #include<string.h>
     #include<conio.h>
     #include<stdlib.h>
     #include<time.h>//for manipulating time


    Int Random_check=0;
    Typedef long long ll;
    
    Void Inputvalues(ll*virtual_pages,ll total_pages, ll total_frames);
    
    Int pagehitting(ll *frames_list, ll total_frames , ll goals);
 {
    For(int i=0; i<total_frames; i++)
{
If(frames_list[i]==goal)
 Return 1;
}
Return 0;
}

Void genertepages(ll *virtual_pages, ll total_pages)
{
  For(int i=0; i<total_pages; i++)

  Virtual_pages[i]==(rand()%10)//for generation of random 0-9 pages
}

Int main(int m, const , char**n)
{
  Srand(time(NULL));//internal clock to control choice of seed

ll total_pages;

ll*virtual_pages;

if(m==1)
{
   Printf(“Enter number of virtual pages”);
Scanf(“%lld”,&total_pages);
Virtual_pages=(ll*)malloc(sizeof(ll))*total_pages);

Int generate_pages(virtual_pages,total_pages);
Random_check=1;

}

Else
{
  Total_page=m-1;
Virtual_pages=(ll*)malloc(sizeof(ll)*total_pages);
Int index=0;

For(int i=1;i<m;i++)
Virtual_pages[index++]=atoll(n[i]);
}

ll total_frames;
printf(“Enter total number of frames”);
scanf(“%lld,&total_frames”);
inputs(virtual_pages, total_pages, total_frames);
ll *frames_list=(ll*)malloc(total_frames*sizeof(ll));

memoryset(frames_list,-1,total_frames*,sizeof(ll));
ll count_page_hitting;
 count_page_fault;

count_page_hitting=count_page_fault=0;
ll last=-1;
for(int i=0;i<total_pages;i++)
{
  If(get pagehit(frames_list,total_frames,virtual_pages[i]))
Count_page_hitting++;
Else
{
  Frames_list[++last%total_frames]=virtual_pages[i];
Count_page_fault++;
}
}
Printf(“number of page hits are%lld\n”,count_page_hitting);
Printf(“number of page faults are %lld\n”,count_page_fault);
Return 0;
}
Void inputs(ll* virtual_pages, ll total_pages, ll total_frames)
{
  Printf(“Entered data as follows”);
Printf(“Number of pages : %lld\n”, total_pages);
If(random_check)
Printf(“Random”);
Printf(“virtual pages”);
For(int i=0;i<total_pages;i++){
Printf(“%dlld”,virtual_pages[i]);
Printf(“number of frames “,total_frames);
}
}



ALGORITHM:
     
     1.Declare necessary variables such as random_check to check the value, tpdef variable;
 
2.Create  input values function to input the values….

3.Use for loop to check the number of frames..

4.Create a generate pages function to generate pages using random  function….
 
5.In main function declare srand() function and declare variables
 Then use if statetment to check the values..
6.Then print values of total_pages and virtual_pages ….

7.Then use memory set fun to create frame_list ….Then print all count of frames..

8.Create input function and give inputs…

9.Then print the entered values…and use srand() fun to create pages  from 0-7 frames…

10.Print the info we need..
CONCEPTS USED:
 
FIFO algorithm takes value into queue and gives the first entered input as first oupt…This basic fundaa helps us to create paging using FIFO page replacement algorithm..

In this algorithm the operating system keeps track of all pages in memory in queue , the oldest page in the front of the queue ….when a page needs to be replaced page in the front of the queue is selected for removal…


TEST CASES:


1.Random number generation…

Using Rand() fun helps us to generate pages ….
To check generated pages use Random_check flag…
Returns 1 for generation..
Returns 0 for not generated….

2.Check generated pages….

Use srand() fun to create frames…then random_check returns 1 if frames are generated…

It returns 0 if not generated..
